// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db_srv {

namespace {

const ::google::protobuf::Descriptor* set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_reply_table_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reply_table_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_reply_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_reply_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* mget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mget_reflection_ = NULL;
const ::google::protobuf::Descriptor* mget_user_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mget_user_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* mget_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mget_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* mget_reply_user_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mget_reply_user_table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  set_descriptor_ = file->message_type(0);
  static const int set_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set, tables_),
  };
  set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_descriptor_,
      set::default_instance_,
      set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set));
  set_table_descriptor_ = set_descriptor_->nested_type(0);
  static const int set_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_table, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_table, table_bin_),
  };
  set_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_table_descriptor_,
      set_table::default_instance_,
      set_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_table));
  set_reply_descriptor_ = file->message_type(1);
  static const int set_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply, table_statuses_),
  };
  set_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_reply_descriptor_,
      set_reply::default_instance_,
      set_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_reply));
  set_reply_table_status_descriptor_ = set_reply_descriptor_->nested_type(0);
  static const int set_reply_table_status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply_table_status, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply_table_status, status_),
  };
  set_reply_table_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_reply_table_status_descriptor_,
      set_reply_table_status::default_instance_,
      set_reply_table_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply_table_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reply_table_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_reply_table_status));
  get_descriptor_ = file->message_type(2);
  static const int get_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get, table_name_),
  };
  get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_descriptor_,
      get::default_instance_,
      get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get));
  get_reply_descriptor_ = file->message_type(3);
  static const int get_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply, tables_),
  };
  get_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_reply_descriptor_,
      get_reply::default_instance_,
      get_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_reply));
  get_reply_table_descriptor_ = get_reply_descriptor_->nested_type(0);
  static const int get_reply_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply_table, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply_table, table_bin_),
  };
  get_reply_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_reply_table_descriptor_,
      get_reply_table::default_instance_,
      get_reply_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_reply_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_reply_table));
  mget_descriptor_ = file->message_type(4);
  static const int mget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget, user_tables_),
  };
  mget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mget_descriptor_,
      mget::default_instance_,
      mget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mget));
  mget_user_table_descriptor_ = mget_descriptor_->nested_type(0);
  static const int mget_user_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_user_table, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_user_table, table_name_),
  };
  mget_user_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mget_user_table_descriptor_,
      mget_user_table::default_instance_,
      mget_user_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_user_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_user_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mget_user_table));
  mget_reply_descriptor_ = file->message_type(5);
  static const int mget_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply, argback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply, tables_),
  };
  mget_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mget_reply_descriptor_,
      mget_reply::default_instance_,
      mget_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mget_reply));
  mget_reply_user_table_descriptor_ = mget_reply_descriptor_->nested_type(0);
  static const int mget_reply_user_table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply_user_table, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply_user_table, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply_user_table, table_bin_),
  };
  mget_reply_user_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mget_reply_user_table_descriptor_,
      mget_reply_user_table::default_instance_,
      mget_reply_user_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply_user_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mget_reply_user_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mget_reply_user_table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_descriptor_, &set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_table_descriptor_, &set_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_reply_descriptor_, &set_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_reply_table_status_descriptor_, &set_reply_table_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_descriptor_, &get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_reply_descriptor_, &get_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_reply_table_descriptor_, &get_reply_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mget_descriptor_, &mget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mget_user_table_descriptor_, &mget_user_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mget_reply_descriptor_, &mget_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mget_reply_user_table_descriptor_, &mget_reply_user_table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete set::default_instance_;
  delete set_reflection_;
  delete set_table::default_instance_;
  delete set_table_reflection_;
  delete set_reply::default_instance_;
  delete set_reply_reflection_;
  delete set_reply_table_status::default_instance_;
  delete set_reply_table_status_reflection_;
  delete get::default_instance_;
  delete get_reflection_;
  delete get_reply::default_instance_;
  delete get_reply_reflection_;
  delete get_reply_table::default_instance_;
  delete get_reply_table_reflection_;
  delete mget::default_instance_;
  delete mget_reflection_;
  delete mget_user_table::default_instance_;
  delete mget_user_table_reflection_;
  delete mget_reply::default_instance_;
  delete mget_reply_reflection_;
  delete mget_reply_user_table::default_instance_;
  delete mget_reply_user_table_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\006db_srv\"v\n\003set\022\013\n\003uid\030\001 \002(\005\022"
    "\017\n\007argback\030\002 \002(\t\022!\n\006tables\030\003 \003(\0132\021.db_sr"
    "v.set.table\032.\n\005table\022\022\n\ntable_name\030\001 \002(\t"
    "\022\021\n\ttable_bin\030\002 \002(\t\"\225\001\n\tset_reply\022\013\n\003uid"
    "\030\001 \002(\005\022\017\n\007argback\030\002 \002(\t\0226\n\016table_statuse"
    "s\030\003 \003(\0132\036.db_srv.set_reply.table_status\032"
    "2\n\014table_status\022\022\n\ntable_name\030\001 \002(\t\022\016\n\006s"
    "tatus\030\002 \002(\t\"7\n\003get\022\013\n\003uid\030\001 \002(\005\022\017\n\007argba"
    "ck\030\002 \002(\t\022\022\n\ntable_name\030\003 \003(\t\"\202\001\n\tget_rep"
    "ly\022\013\n\003uid\030\001 \002(\005\022\017\n\007argback\030\002 \002(\t\022\'\n\006tabl"
    "es\030\003 \003(\0132\027.db_srv.get_reply.table\032.\n\005tab"
    "le\022\022\n\ntable_name\030\001 \002(\t\022\021\n\ttable_bin\030\002 \002("
    "\t\"\201\001\n\004mget\022\013\n\003uid\030\001 \002(\005\022\017\n\007argback\030\002 \002(\t"
    "\022,\n\013user_tables\030\003 \003(\0132\027.db_srv.mget.user"
    "_table\032-\n\nuser_table\022\013\n\003uid\030\001 \002(\005\022\022\n\ntab"
    "le_name\030\002 \002(\t\"\233\001\n\nmget_reply\022\013\n\003uid\030\001 \002("
    "\005\022\017\n\007argback\030\002 \002(\t\022-\n\006tables\030\003 \003(\0132\035.db_"
    "srv.mget_reply.user_table\032@\n\nuser_table\022"
    "\013\n\003uid\030\001 \002(\005\022\022\n\ntable_name\030\002 \002(\t\022\021\n\ttabl"
    "e_bin\030\003 \002(\t", 771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  set::default_instance_ = new set();
  set_table::default_instance_ = new set_table();
  set_reply::default_instance_ = new set_reply();
  set_reply_table_status::default_instance_ = new set_reply_table_status();
  get::default_instance_ = new get();
  get_reply::default_instance_ = new get_reply();
  get_reply_table::default_instance_ = new get_reply_table();
  mget::default_instance_ = new mget();
  mget_user_table::default_instance_ = new mget_user_table();
  mget_reply::default_instance_ = new mget_reply();
  mget_reply_user_table::default_instance_ = new mget_reply_user_table();
  set::default_instance_->InitAsDefaultInstance();
  set_table::default_instance_->InitAsDefaultInstance();
  set_reply::default_instance_->InitAsDefaultInstance();
  set_reply_table_status::default_instance_->InitAsDefaultInstance();
  get::default_instance_->InitAsDefaultInstance();
  get_reply::default_instance_->InitAsDefaultInstance();
  get_reply_table::default_instance_->InitAsDefaultInstance();
  mget::default_instance_->InitAsDefaultInstance();
  mget_user_table::default_instance_->InitAsDefaultInstance();
  mget_reply::default_instance_->InitAsDefaultInstance();
  mget_reply_user_table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int set_table::kTableNameFieldNumber;
const int set_table::kTableBinFieldNumber;
#endif  // !_MSC_VER

set_table::set_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_table::InitAsDefaultInstance() {
}

set_table::set_table(const set_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_table::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_bin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_table::~set_table() {
  SharedDtor();
}

void set_table::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
    delete table_bin_;
  }
  if (this != default_instance_) {
  }
}

void set_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_table_descriptor_;
}

const set_table& set_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

set_table* set_table::default_instance_ = NULL;

set_table* set_table::New() const {
  return new set_table;
}

void set_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_table_bin()) {
      if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
        table_bin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_bin;
        break;
      }
      
      // required string table_bin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_bin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_bin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_bin().data(), this->table_bin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // required string table_bin = 2;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_bin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // required string table_bin = 2;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_bin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_table::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // required string table_bin = 2;
    if (has_table_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_bin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_table::MergeFrom(const set_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_bin()) {
      set_table_bin(from.table_bin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_table::CopyFrom(const set_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void set_table::Swap(set_table* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(table_bin_, other->table_bin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_table_descriptor_;
  metadata.reflection = set_table_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int set::kUidFieldNumber;
const int set::kArgbackFieldNumber;
const int set::kTablesFieldNumber;
#endif  // !_MSC_VER

set::set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set::InitAsDefaultInstance() {
}

set::set(const set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set::~set() {
  SharedDtor();
}

void set::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_descriptor_;
}

const set& set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

set* set::default_instance_ = NULL;

set* set::New() const {
  return new set;
}

void set::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        break;
      }
      
      // repeated .db_srv.set.table tables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated .db_srv.set.table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated .db_srv.set.table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated .db_srv.set.table tables = 3;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set::MergeFrom(const set& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set::CopyFrom(const set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tables_size(); i++) {
    if (!this->tables(i).IsInitialized()) return false;
  }
  return true;
}

void set::Swap(set* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_descriptor_;
  metadata.reflection = set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_reply_table_status::kTableNameFieldNumber;
const int set_reply_table_status::kStatusFieldNumber;
#endif  // !_MSC_VER

set_reply_table_status::set_reply_table_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_reply_table_status::InitAsDefaultInstance() {
}

set_reply_table_status::set_reply_table_status(const set_reply_table_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_reply_table_status::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_reply_table_status::~set_reply_table_status() {
  SharedDtor();
}

void set_reply_table_status::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void set_reply_table_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_reply_table_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_reply_table_status_descriptor_;
}

const set_reply_table_status& set_reply_table_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

set_reply_table_status* set_reply_table_status::default_instance_ = NULL;

set_reply_table_status* set_reply_table_status::New() const {
  return new set_reply_table_status;
}

void set_reply_table_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_reply_table_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_reply_table_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_reply_table_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_reply_table_status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // required string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_reply_table_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_reply_table_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_reply_table_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_reply_table_status::MergeFrom(const set_reply_table_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_reply_table_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_reply_table_status::CopyFrom(const set_reply_table_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_reply_table_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void set_reply_table_status::Swap(set_reply_table_status* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_reply_table_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_reply_table_status_descriptor_;
  metadata.reflection = set_reply_table_status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int set_reply::kUidFieldNumber;
const int set_reply::kArgbackFieldNumber;
const int set_reply::kTableStatusesFieldNumber;
#endif  // !_MSC_VER

set_reply::set_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_reply::InitAsDefaultInstance() {
}

set_reply::set_reply(const set_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_reply::~set_reply() {
  SharedDtor();
}

void set_reply::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void set_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_reply_descriptor_;
}

const set_reply& set_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

set_reply* set_reply::default_instance_ = NULL;

set_reply* set_reply::New() const {
  return new set_reply;
}

void set_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  table_statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_statuses;
        break;
      }
      
      // repeated .db_srv.set_reply.table_status table_statuses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_statuses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_statuses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated .db_srv.set_reply.table_status table_statuses = 3;
  for (int i = 0; i < this->table_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_statuses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated .db_srv.set_reply.table_status table_statuses = 3;
  for (int i = 0; i < this->table_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_statuses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated .db_srv.set_reply.table_status table_statuses = 3;
  total_size += 1 * this->table_statuses_size();
  for (int i = 0; i < this->table_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_statuses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_reply::MergeFrom(const set_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_statuses_.MergeFrom(from.table_statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_reply::CopyFrom(const set_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < table_statuses_size(); i++) {
    if (!this->table_statuses(i).IsInitialized()) return false;
  }
  return true;
}

void set_reply::Swap(set_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    table_statuses_.Swap(&other->table_statuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_reply_descriptor_;
  metadata.reflection = set_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get::kUidFieldNumber;
const int get::kArgbackFieldNumber;
const int get::kTableNameFieldNumber;
#endif  // !_MSC_VER

get::get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get::InitAsDefaultInstance() {
}

get::get(const get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get::~get() {
  SharedDtor();
}

void get::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_descriptor_;
}

const get& get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

get* get::default_instance_ = NULL;

get* get::New() const {
  return new get;
}

void get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  table_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }
      
      // repeated string table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name(0).data(), this->table_name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated string table_name = 3;
  for (int i = 0; i < this->table_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->table_name(i).data(), this->table_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_name(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated string table_name = 3;
  for (int i = 0; i < this->table_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name(i).data(), this->table_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->table_name(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated string table_name = 3;
  total_size += 1 * this->table_name_size();
  for (int i = 0; i < this->table_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->table_name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get::MergeFrom(const get& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_name_.MergeFrom(from.table_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get::CopyFrom(const get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void get::Swap(get* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    table_name_.Swap(&other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_descriptor_;
  metadata.reflection = get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_reply_table::kTableNameFieldNumber;
const int get_reply_table::kTableBinFieldNumber;
#endif  // !_MSC_VER

get_reply_table::get_reply_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_reply_table::InitAsDefaultInstance() {
}

get_reply_table::get_reply_table(const get_reply_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_reply_table::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_bin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_reply_table::~get_reply_table() {
  SharedDtor();
}

void get_reply_table::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
    delete table_bin_;
  }
  if (this != default_instance_) {
  }
}

void get_reply_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_reply_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_reply_table_descriptor_;
}

const get_reply_table& get_reply_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

get_reply_table* get_reply_table::default_instance_ = NULL;

get_reply_table* get_reply_table::New() const {
  return new get_reply_table;
}

void get_reply_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_table_bin()) {
      if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
        table_bin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_reply_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_bin;
        break;
      }
      
      // required string table_bin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_bin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_bin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_bin().data(), this->table_bin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_reply_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // required string table_bin = 2;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_bin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_reply_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // required string table_bin = 2;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_bin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_reply_table::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // required string table_bin = 2;
    if (has_table_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_bin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_reply_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_reply_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_reply_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_reply_table::MergeFrom(const get_reply_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_bin()) {
      set_table_bin(from.table_bin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_reply_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_reply_table::CopyFrom(const get_reply_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_reply_table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void get_reply_table::Swap(get_reply_table* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(table_bin_, other->table_bin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_reply_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_reply_table_descriptor_;
  metadata.reflection = get_reply_table_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int get_reply::kUidFieldNumber;
const int get_reply::kArgbackFieldNumber;
const int get_reply::kTablesFieldNumber;
#endif  // !_MSC_VER

get_reply::get_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_reply::InitAsDefaultInstance() {
}

get_reply::get_reply(const get_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_reply::~get_reply() {
  SharedDtor();
}

void get_reply::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void get_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_reply_descriptor_;
}

const get_reply& get_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

get_reply* get_reply::default_instance_ = NULL;

get_reply* get_reply::New() const {
  return new get_reply;
}

void get_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        break;
      }
      
      // repeated .db_srv.get_reply.table tables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated .db_srv.get_reply.table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated .db_srv.get_reply.table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated .db_srv.get_reply.table tables = 3;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_reply::MergeFrom(const get_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_reply::CopyFrom(const get_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tables_size(); i++) {
    if (!this->tables(i).IsInitialized()) return false;
  }
  return true;
}

void get_reply::Swap(get_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_reply_descriptor_;
  metadata.reflection = get_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mget_user_table::kUidFieldNumber;
const int mget_user_table::kTableNameFieldNumber;
#endif  // !_MSC_VER

mget_user_table::mget_user_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mget_user_table::InitAsDefaultInstance() {
}

mget_user_table::mget_user_table(const mget_user_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mget_user_table::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mget_user_table::~mget_user_table() {
  SharedDtor();
}

void mget_user_table::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void mget_user_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mget_user_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mget_user_table_descriptor_;
}

const mget_user_table& mget_user_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

mget_user_table* mget_user_table::default_instance_ = NULL;

mget_user_table* mget_user_table::New() const {
  return new mget_user_table;
}

void mget_user_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mget_user_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mget_user_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mget_user_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mget_user_table::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mget_user_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mget_user_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mget_user_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mget_user_table::MergeFrom(const mget_user_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mget_user_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mget_user_table::CopyFrom(const mget_user_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mget_user_table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mget_user_table::Swap(mget_user_table* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mget_user_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mget_user_table_descriptor_;
  metadata.reflection = mget_user_table_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int mget::kUidFieldNumber;
const int mget::kArgbackFieldNumber;
const int mget::kUserTablesFieldNumber;
#endif  // !_MSC_VER

mget::mget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mget::InitAsDefaultInstance() {
}

mget::mget(const mget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mget::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mget::~mget() {
  SharedDtor();
}

void mget::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void mget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mget_descriptor_;
}

const mget& mget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

mget* mget::default_instance_ = NULL;

mget* mget::New() const {
  return new mget;
}

void mget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  user_tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_tables;
        break;
      }
      
      // repeated .db_srv.mget.user_table user_tables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated .db_srv.mget.user_table user_tables = 3;
  for (int i = 0; i < this->user_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_tables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated .db_srv.mget.user_table user_tables = 3;
  for (int i = 0; i < this->user_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_tables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated .db_srv.mget.user_table user_tables = 3;
  total_size += 1 * this->user_tables_size();
  for (int i = 0; i < this->user_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mget::MergeFrom(const mget& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_tables_.MergeFrom(from.user_tables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mget::CopyFrom(const mget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < user_tables_size(); i++) {
    if (!this->user_tables(i).IsInitialized()) return false;
  }
  return true;
}

void mget::Swap(mget* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    user_tables_.Swap(&other->user_tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mget_descriptor_;
  metadata.reflection = mget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mget_reply_user_table::kUidFieldNumber;
const int mget_reply_user_table::kTableNameFieldNumber;
const int mget_reply_user_table::kTableBinFieldNumber;
#endif  // !_MSC_VER

mget_reply_user_table::mget_reply_user_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mget_reply_user_table::InitAsDefaultInstance() {
}

mget_reply_user_table::mget_reply_user_table(const mget_reply_user_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mget_reply_user_table::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_bin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mget_reply_user_table::~mget_reply_user_table() {
  SharedDtor();
}

void mget_reply_user_table::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
    delete table_bin_;
  }
  if (this != default_instance_) {
  }
}

void mget_reply_user_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mget_reply_user_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mget_reply_user_table_descriptor_;
}

const mget_reply_user_table& mget_reply_user_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

mget_reply_user_table* mget_reply_user_table::default_instance_ = NULL;

mget_reply_user_table* mget_reply_user_table::New() const {
  return new mget_reply_user_table;
}

void mget_reply_user_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_table_bin()) {
      if (table_bin_ != &::google::protobuf::internal::kEmptyString) {
        table_bin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mget_reply_user_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_bin;
        break;
      }
      
      // required string table_bin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_bin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_bin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_bin().data(), this->table_bin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mget_reply_user_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }
  
  // required string table_bin = 3;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_bin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mget_reply_user_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }
  
  // required string table_bin = 3;
  if (has_table_bin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_bin().data(), this->table_bin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_bin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mget_reply_user_table::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // required string table_bin = 3;
    if (has_table_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_bin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mget_reply_user_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mget_reply_user_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mget_reply_user_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mget_reply_user_table::MergeFrom(const mget_reply_user_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_bin()) {
      set_table_bin(from.table_bin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mget_reply_user_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mget_reply_user_table::CopyFrom(const mget_reply_user_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mget_reply_user_table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mget_reply_user_table::Swap(mget_reply_user_table* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(table_name_, other->table_name_);
    std::swap(table_bin_, other->table_bin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mget_reply_user_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mget_reply_user_table_descriptor_;
  metadata.reflection = mget_reply_user_table_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int mget_reply::kUidFieldNumber;
const int mget_reply::kArgbackFieldNumber;
const int mget_reply::kTablesFieldNumber;
#endif  // !_MSC_VER

mget_reply::mget_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mget_reply::InitAsDefaultInstance() {
}

mget_reply::mget_reply(const mget_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mget_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  argback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mget_reply::~mget_reply() {
  SharedDtor();
}

void mget_reply::SharedDtor() {
  if (argback_ != &::google::protobuf::internal::kEmptyString) {
    delete argback_;
  }
  if (this != default_instance_) {
  }
}

void mget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mget_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mget_reply_descriptor_;
}

const mget_reply& mget_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

mget_reply* mget_reply::default_instance_ = NULL;

mget_reply* mget_reply::New() const {
  return new mget_reply;
}

void mget_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_argback()) {
      if (argback_ != &::google::protobuf::internal::kEmptyString) {
        argback_->clear();
      }
    }
  }
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argback;
        break;
      }
      
      // required string argback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argback().data(), this->argback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        break;
      }
      
      // repeated .db_srv.mget_reply.user_table tables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argback(), output);
  }
  
  // repeated .db_srv.mget_reply.user_table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mget_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required string argback = 2;
  if (has_argback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argback().data(), this->argback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->argback(), target);
  }
  
  // repeated .db_srv.mget_reply.user_table tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mget_reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required string argback = 2;
    if (has_argback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argback());
    }
    
  }
  // repeated .db_srv.mget_reply.user_table tables = 3;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mget_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mget_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mget_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mget_reply::MergeFrom(const mget_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_argback()) {
      set_argback(from.argback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mget_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mget_reply::CopyFrom(const mget_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mget_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tables_size(); i++) {
    if (!this->tables(i).IsInitialized()) return false;
  }
  return true;
}

void mget_reply::Swap(mget_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(argback_, other->argback_);
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mget_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mget_reply_descriptor_;
  metadata.reflection = mget_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_srv

// @@protoc_insertion_point(global_scope)
