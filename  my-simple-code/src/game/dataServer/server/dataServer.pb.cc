// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataserver {

namespace {

const ::google::protobuf::Descriptor* Select_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Select_reflection_ = NULL;
const ::google::protobuf::Descriptor* Insert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Insert_reflection_ = NULL;
const ::google::protobuf::Descriptor* Delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Delete_reflection_ = NULL;
const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataServer_2eproto() {
  protobuf_AddDesc_dataServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataServer.proto");
  GOOGLE_CHECK(file != NULL);
  Select_descriptor_ = file->message_type(0);
  static const int Select_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Select, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Select, messagename_),
  };
  Select_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Select_descriptor_,
      Select::default_instance_,
      Select_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Select, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Select, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Select));
  Insert_descriptor_ = file->message_type(1);
  static const int Insert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Insert, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Insert, messagename_),
  };
  Insert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Insert_descriptor_,
      Insert::default_instance_,
      Insert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Insert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Insert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Insert));
  Delete_descriptor_ = file->message_type(2);
  static const int Delete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delete, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delete, messagename_),
  };
  Delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Delete_descriptor_,
      Delete::default_instance_,
      Delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Delete));
  Update_descriptor_ = file->message_type(3);
  static const int Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, messagename_),
  };
  Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Update));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Select_descriptor_, &Select::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Insert_descriptor_, &Insert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Delete_descriptor_, &Delete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Update_descriptor_, &Update::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataServer_2eproto() {
  delete Select::default_instance_;
  delete Select_reflection_;
  delete Insert::default_instance_;
  delete Insert_reflection_;
  delete Delete::default_instance_;
  delete Delete_reflection_;
  delete Update::default_instance_;
  delete Update_reflection_;
}

void protobuf_AddDesc_dataServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dataServer.proto\022\ndataserver\"*\n\006Select"
    "\022\013\n\003key\030\001 \002(\005\022\023\n\013messageName\030\002 \002(\t\"*\n\006In"
    "sert\022\013\n\003key\030\001 \002(\005\022\023\n\013messageName\030\002 \002(\t\"*"
    "\n\006Delete\022\013\n\003key\030\001 \002(\005\022\023\n\013messageName\030\002 \002"
    "(\t\"*\n\006Update\022\013\n\003key\030\001 \002(\005\022\023\n\013messageName"
    "\030\002 \002(\t", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataServer.proto", &protobuf_RegisterTypes);
  Select::default_instance_ = new Select();
  Insert::default_instance_ = new Insert();
  Delete::default_instance_ = new Delete();
  Update::default_instance_ = new Update();
  Select::default_instance_->InitAsDefaultInstance();
  Insert::default_instance_->InitAsDefaultInstance();
  Delete::default_instance_->InitAsDefaultInstance();
  Update::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataServer_2eproto {
  StaticDescriptorInitializer_dataServer_2eproto() {
    protobuf_AddDesc_dataServer_2eproto();
  }
} static_descriptor_initializer_dataServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Select::kKeyFieldNumber;
const int Select::kMessageNameFieldNumber;
#endif  // !_MSC_VER

Select::Select()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Select::InitAsDefaultInstance() {
}

Select::Select(const Select& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Select::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Select::~Select() {
  SharedDtor();
}

void Select::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (this != default_instance_) {
  }
}

void Select::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Select::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Select_descriptor_;
}

const Select& Select::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataServer_2eproto();  return *default_instance_;
}

Select* Select::default_instance_ = NULL;

Select* Select::New() const {
  return new Select;
}

void Select::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::kEmptyString) {
        messagename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Select::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageName;
        break;
      }
      
      // required string messageName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Select::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messagename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Select::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messagename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Select::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required string messageName = 2;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Select::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Select* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Select*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Select::MergeFrom(const Select& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Select::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Select::CopyFrom(const Select& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Select::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Select::Swap(Select* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(messagename_, other->messagename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Select::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Select_descriptor_;
  metadata.reflection = Select_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Insert::kKeyFieldNumber;
const int Insert::kMessageNameFieldNumber;
#endif  // !_MSC_VER

Insert::Insert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Insert::InitAsDefaultInstance() {
}

Insert::Insert(const Insert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Insert::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Insert::~Insert() {
  SharedDtor();
}

void Insert::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (this != default_instance_) {
  }
}

void Insert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Insert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Insert_descriptor_;
}

const Insert& Insert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataServer_2eproto();  return *default_instance_;
}

Insert* Insert::default_instance_ = NULL;

Insert* Insert::New() const {
  return new Insert;
}

void Insert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::kEmptyString) {
        messagename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageName;
        break;
      }
      
      // required string messageName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messagename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Insert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messagename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Insert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required string messageName = 2;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Insert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Insert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Insert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Insert::MergeFrom(const Insert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Insert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Insert::CopyFrom(const Insert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Insert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Insert::Swap(Insert* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(messagename_, other->messagename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Insert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Insert_descriptor_;
  metadata.reflection = Insert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Delete::kKeyFieldNumber;
const int Delete::kMessageNameFieldNumber;
#endif  // !_MSC_VER

Delete::Delete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Delete::InitAsDefaultInstance() {
}

Delete::Delete(const Delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Delete::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Delete::~Delete() {
  SharedDtor();
}

void Delete::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (this != default_instance_) {
  }
}

void Delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Delete_descriptor_;
}

const Delete& Delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataServer_2eproto();  return *default_instance_;
}

Delete* Delete::default_instance_ = NULL;

Delete* Delete::New() const {
  return new Delete;
}

void Delete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::kEmptyString) {
        messagename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageName;
        break;
      }
      
      // required string messageName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messagename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messagename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Delete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required string messageName = 2;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Delete::MergeFrom(const Delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delete::CopyFrom(const Delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Delete::Swap(Delete* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(messagename_, other->messagename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Delete_descriptor_;
  metadata.reflection = Delete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kKeyFieldNumber;
const int Update::kMessageNameFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Update::InitAsDefaultInstance() {
}

Update::Update(const Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Update::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  SharedDtor();
}

void Update::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (this != default_instance_) {
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataServer_2eproto();  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::kEmptyString) {
        messagename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageName;
        break;
      }
      
      // required string messageName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messagename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required string messageName = 2;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messagename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required string messageName = 2;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(messagename_, other->messagename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataserver

// @@protoc_insertion_point(global_scope)
